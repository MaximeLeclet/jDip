#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// dip.order.Disband
	c116 [label=<<table title="dip.order.Disband" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Disband.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Disband </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + getDefaultFormat() : String </td></tr>
<tr><td align="left" balign="left"> + toBriefString() : String </td></tr>
<tr><td align="left" balign="left"> + toFullString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> + verify(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + determineDependencies(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.ValidationOptions
	c117 [label=<<table title="dip.order.ValidationOptions" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ValidationOptions.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ValidationOptions </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + KEY_GLOBAL_PARSING : String </td></tr>
<tr><td align="left" balign="left"> + VALUE_GLOBAL_PARSING_STRICT : String </td></tr>
<tr><td align="left" balign="left"> + VALUE_GLOBAL_PARSING_LOOSE : String </td></tr>
<tr><td align="left" balign="left"> + OPTION_GLOBAL_PARSING : ValidationOptions.Option </td></tr>
<tr><td align="left" balign="left"> # _OPTIONS : ValidationOptions.Option[] </td></tr>
<tr><td align="left" balign="left"> # map : Hashtable </td></tr>
<tr><td align="left" balign="left"> # options : ValidationOptions.Option[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + clone() : Object </td></tr>
<tr><td align="left" balign="left"> + getOptions() : ValidationOptions.DescriptiveOption[] </td></tr>
<tr><td align="left" balign="left"> + setOption(key : String, value : Object) </td></tr>
<tr><td align="left" balign="left"> + getOption(key : String) : Object </td></tr>
<tr><td align="left" balign="left"> + isOption(key : String, value : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + clearOptions() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.ValidationOptions.Option
	c118 [label=<<table title="dip.order.ValidationOptions.Option" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ValidationOptions.Option.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Option </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getKey() : String </td></tr>
<tr><td align="left" balign="left"> + getValues() : String[] </td></tr>
<tr><td align="left" balign="left"> + getDefaultValue() : String </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.ValidationOptions.DescriptiveOption
	c119 [label=<<table title="dip.order.ValidationOptions.DescriptiveOption" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ValidationOptions.DescriptiveOption.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DescriptiveOption </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # setDisplayName(value : String) </td></tr>
<tr><td align="left" balign="left"> # setDescription(value : String) </td></tr>
<tr><td align="left" balign="left"> # setDisplayValues(value : String[]) </td></tr>
<tr><td align="left" balign="left"> # setValueDescriptions(value : String[]) </td></tr>
<tr><td align="left" balign="left"> + getDisplayName() : String </td></tr>
<tr><td align="left" balign="left"> + getDescription() : String </td></tr>
<tr><td align="left" balign="left"> + getDisplayValues() : String[] </td></tr>
<tr><td align="left" balign="left"> + getValueDescriptions() : String[] </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.OrderFormat
	c120 [label=<<table title="dip.order.OrderFormat" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./OrderFormat.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrderFormat </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + format(ofo : OrderFormatOptions, coast : Coast) : String </td></tr>
<tr><td align="left" balign="left"> + format(ofo : OrderFormatOptions, province : Province) : String </td></tr>
<tr><td align="left" balign="left"> + format(ofo : OrderFormatOptions, unitType : Unit.Type) : String </td></tr>
<tr><td align="left" balign="left"> + format(ofo : OrderFormatOptions, power : Power) : String </td></tr>
<tr><td align="left" balign="left"> + format(ofo : OrderFormatOptions, loc : Location) : String </td></tr>
<tr><td align="left" balign="left"> + formatOrderName(ofo : OrderFormatOptions, order : Orderable) : String </td></tr>
<tr><td align="left" balign="left"> + format(ofo : OrderFormatOptions, order : Orderable) : String </td></tr>
<tr><td align="left" balign="left"> + format(ofo : OrderFormatOptions, format : String, order : Orderable) : String </td></tr>
<tr><td align="left" balign="left"> + getFormatExample(ofo : OrderFormatOptions, of : OrderFactory) : String </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.Hold
	c121 [label=<<table title="dip.order.Hold" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Hold.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Hold </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + getDefaultFormat() : String </td></tr>
<tr><td align="left" balign="left"> + toBriefString() : String </td></tr>
<tr><td align="left" balign="left"> + toFullString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> + verify(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + determineDependencies(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.Order
	c122 [label=<<table title="dip.order.Order" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Order.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Order </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ORD_VAL_BORDER : String </td></tr>
<tr><td align="left" balign="left"> # power : Power </td></tr>
<tr><td align="left" balign="left"> # src : Location </td></tr>
<tr><td align="left" balign="left"> # srcUnitType : Unit.Type </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getSource() : Location </td></tr>
<tr><td align="left" balign="left"> + getSourceUnitType() : Unit.Type </td></tr>
<tr><td align="left" balign="left"> + getPower() : Power </td></tr>
<tr><td align="left" balign="left"> + toFormattedString(ofo : OrderFormatOptions) : String </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> # addSupportsOfAndMovesToSource(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> # validate(valOpts : ValidationOptions, unit : Unit) </td></tr>
<tr><td align="left" balign="left"> # getValidatedUnitType(province : Province, unitType : Unit.Type, unit : Unit) : Unit.Type </td></tr>
<tr><td align="left" balign="left"> # checkPower(power : Power, turnState : TurnState, checkIfActive : boolean) </td></tr>
<tr><td align="left" balign="left"> # checkSeasonRetreat(state : TurnState, orderName : String) </td></tr>
<tr><td align="left" balign="left"> # checkSeasonAdjustment(state : TurnState, orderName : String) </td></tr>
<tr><td align="left" balign="left"> # checkSeasonMovement(state : TurnState, orderName : String) </td></tr>
<tr><td align="left" balign="left"> # appendFull(sb : StringBuffer) </td></tr>
<tr><td align="left" balign="left"> # appendBrief(sb : StringBuffer) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.OrderFactory
	c123 [label=<<table title="dip.order.OrderFactory" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./OrderFactory.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> OrderFactory </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getDefault() : OrderFactory </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createHold(power : Power, source : Location, sourceUnitType : Unit.Type) : Hold </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createMove(power : Power, source : Location, srcUnitType : Unit.Type, dest : Location) : Move </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createMove(power : Power, source : Location, srcUnitType : Unit.Type, dest : Location, isConvoying : boolean) : Move </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createMove(power : Power, src : Location, srcUnitType : Unit.Type, dest : Location, convoyRoute : Province[]) : Move </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createMove(power : Power, src : Location, srcUnitType : Unit.Type, dest : Location, routes : List) : Move </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createSupport(power : Power, src : Location, srcUnitType : Unit.Type, supSrc : Location, supPower : Power, supUnitType : Unit.Type) : Support </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createSupport(power : Power, src : Location, srcUnitType : Unit.Type, supSrc : Location, supPower : Power, supUnitType : Unit.Type, supDest : Location) : Support </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createConvoy(power : Power, src : Location, srcUnitType : Unit.Type, convoySrc : Location, convoyPower : Power, convoySrcUnitType : Unit.Type, convoyDest : Location) : Convoy </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createRetreat(power : Power, source : Location, srcUnitType : Unit.Type, dest : Location) : Retreat </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createDisband(power : Power, source : Location, sourceUnitType : Unit.Type) : Disband </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createBuild(power : Power, source : Location, sourceUnitType : Unit.Type) : Build </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createRemove(power : Power, source : Location, sourceUnitType : Unit.Type) : Remove </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createWaive(power : Power, source : Location) : Waive </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + createDefineState(power : Power, source : Location, sourceUnitType : Unit.Type) : DefineState </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.Build
	c124 [label=<<table title="dip.order.Build" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Build.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Build </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + getDefaultFormat() : String </td></tr>
<tr><td align="left" balign="left"> + toBriefString() : String </td></tr>
<tr><td align="left" balign="left"> + toFullString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> + verify(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + determineDependencies(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.OrderException
	c125 [label=<<table title="dip.order.OrderException" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./OrderException.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrderException </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getOrder() : Order </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.OrderParser
	c126 [label=<<table title="dip.order.OrderParser" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./OrderParser.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrderParser </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getInstance() : OrderParser </td></tr>
<tr><td align="left" balign="left"> + parse(orderFactory : OrderFactory, text : String, power : Power, turnState : TurnState, locked : boolean, guess : boolean) : Order </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.NJudgeOrderParser
	c127 [label=<<table title="dip.order.NJudgeOrderParser" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./NJudgeOrderParser.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NJudgeOrderParser </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + parse(map : Map, orderFactory : OrderFactory, phaseType : Phase.PhaseType, line : String) : NJudgeOrderParser.NJudgeOrder </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.NJudgeOrderParser.NJudgeOrder
	c128 [label=<<table title="dip.order.NJudgeOrderParser.NJudgeOrder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./NJudgeOrderParser.NJudgeOrder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NJudgeOrder </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getOrder() : Orderable </td></tr>
<tr><td align="left" balign="left"> + getResults() : List </td></tr>
<tr><td align="left" balign="left"> + isAdjustmentPhase() : boolean </td></tr>
<tr><td align="left" balign="left"> + getUnusedPendingBuilds() : int </td></tr>
<tr><td align="left" balign="left"> + getUnusedPendingWaives() : int </td></tr>
<tr><td align="left" balign="left"> + isWaivedBuild() : boolean </td></tr>
<tr><td align="left" balign="left"> + getAdjustmentPower() : Power </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.Orderable
	c129 [label=<<table title="dip.order.Orderable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Orderable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Orderable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getSource() : Location </td></tr>
<tr><td align="left" balign="left"> + getSourceUnitType() : Unit.Type </td></tr>
<tr><td align="left" balign="left"> + getPower() : Power </td></tr>
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + toBriefString() : String </td></tr>
<tr><td align="left" balign="left"> + toFullString() : String </td></tr>
<tr><td align="left" balign="left"> + getDefaultFormat() : String </td></tr>
<tr><td align="left" balign="left"> + toFormattedString(ofo : OrderFormatOptions) : String </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> + verify(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + determineDependencies(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.Move
	c130 [label=<<table title="dip.order.Move" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Move.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Move </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # dest : Location </td></tr>
<tr><td align="left" balign="left"> # convoyRoutes : ArrayList </td></tr>
<tr><td align="left" balign="left"> # _isViaConvoy : boolean </td></tr>
<tr><td align="left" balign="left"> # _isConvoyIntent : boolean </td></tr>
<tr><td align="left" balign="left"> # _isAdjWithPossibleConvoy : boolean </td></tr>
<tr><td align="left" balign="left"> # _fmtIsAdjWithConvoy : boolean </td></tr>
<tr><td align="left" balign="left"> # _hasLandRoute : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getDest() : Location </td></tr>
<tr><td align="left" balign="left"> + isViaConvoy() : boolean </td></tr>
<tr><td align="left" balign="left"> + isAdjWithPossibleConvoy() : boolean </td></tr>
<tr><td align="left" balign="left"> + isConvoyIntent() : boolean </td></tr>
<tr><td align="left" balign="left"> + isConvoying() : boolean </td></tr>
<tr><td align="left" balign="left"> + getConvoyRoute() : Province[] </td></tr>
<tr><td align="left" balign="left"> + getConvoyRoutes() : List </td></tr>
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + getDefaultFormat() : String </td></tr>
<tr><td align="left" balign="left"> + toBriefString() : String </td></tr>
<tr><td align="left" balign="left"> + toFullString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> # validateTheoreticalConvoyRoute(position : Position) </td></tr>
<tr><td align="left" balign="left"> # formatConvoyRoute(route : Province[], isBrief : boolean, useHyphen : boolean) : String </td></tr>
<tr><td align="left" balign="left"> # formatConvoyRoute(sb : StringBuffer, route : Province[], isBrief : boolean, useHyphen : boolean) </td></tr>
<tr><td align="left" balign="left"> + verify(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + determineDependencies(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.Remove
	c131 [label=<<table title="dip.order.Remove" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Remove.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Remove </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + getDefaultFormat() : String </td></tr>
<tr><td align="left" balign="left"> + toBriefString() : String </td></tr>
<tr><td align="left" balign="left"> + toFullString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> + verify(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + determineDependencies(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.Waive
	c132 [label=<<table title="dip.order.Waive" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Waive.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Waive </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + getDefaultFormat() : String </td></tr>
<tr><td align="left" balign="left"> + toBriefString() : String </td></tr>
<tr><td align="left" balign="left"> + toFullString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> + verify(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + determineDependencies(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.OrderWarning
	c133 [label=<<table title="dip.order.OrderWarning" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./OrderWarning.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrderWarning </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.OrderFormatOptions
	c134 [label=<<table title="dip.order.OrderFormatOptions" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./OrderFormatOptions.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrderFormatOptions </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + STYLE_NONE : int </td></tr>
<tr><td align="left" balign="left"> + STYLE_LOWER : int </td></tr>
<tr><td align="left" balign="left"> + STYLE_UPPER : int </td></tr>
<tr><td align="left" balign="left"> + STYLE_TITLE : int </td></tr>
<tr><td align="left" balign="left"> + STYLE_TITLE_ALL : int </td></tr>
<tr><td align="left" balign="left"> + STYLE_PLURAL_NONE : int </td></tr>
<tr><td align="left" balign="left"> + STYLE_PLURAL_LOWER : int </td></tr>
<tr><td align="left" balign="left"> + STYLE_PLURAL_UPPER : int </td></tr>
<tr><td align="left" balign="left"> + STYLE_PLURAL_TITLE : int </td></tr>
<tr><td align="left" balign="left"> + STYLE_PLURAL_TITLE_ALL : int </td></tr>
<tr><td align="left" balign="left"> + FORMAT_BRIEF : int </td></tr>
<tr><td align="left" balign="left"> + FORMAT_FULL : int </td></tr>
<tr><td align="left" balign="left"> + FORMAT_COAST_PAREN_BRIEF : int </td></tr>
<tr><td align="left" balign="left"> + FORMAT_COAST_PAREN_FULL : int </td></tr>
<tr><td align="left" balign="left"> + ARROW_DEFAULT : String </td></tr>
<tr><td align="left" balign="left"> + ARROW_UNICODE : String </td></tr>
<tr><td align="left" balign="left"> + ARROWS : String[] </td></tr>
<tr><td align="left" balign="left"> + COAST_SEP_SLASH : char </td></tr>
<tr><td align="left" balign="left"> + COAST_SEP_HYPEN : char </td></tr>
<tr><td align="left" balign="left"> + COAST_SEP_NONE : char </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + createDefault() : OrderFormatOptions </td></tr>
<tr><td align="left" balign="left"> + createTerse() : OrderFormatOptions </td></tr>
<tr><td align="left" balign="left"> + createVerbose() : OrderFormatOptions </td></tr>
<tr><td align="left" balign="left"> + createNJudge() : OrderFormatOptions </td></tr>
<tr><td align="left" balign="left"> + createDebug() : OrderFormatOptions </td></tr>
<tr><td align="left" balign="left"> + getProvinceStyle() : int </td></tr>
<tr><td align="left" balign="left"> + getCoastStyle() : int </td></tr>
<tr><td align="left" balign="left"> + getPowerStyle() : int </td></tr>
<tr><td align="left" balign="left"> + getUnitStyle() : int </td></tr>
<tr><td align="left" balign="left"> + getOrderNameStyle() : int </td></tr>
<tr><td align="left" balign="left"> + getProvinceFormat() : int </td></tr>
<tr><td align="left" balign="left"> + getCoastFormat() : int </td></tr>
<tr><td align="left" balign="left"> + getPowerFormat() : int </td></tr>
<tr><td align="left" balign="left"> + getUnitFormat() : int </td></tr>
<tr><td align="left" balign="left"> + getOrderNameFormat() : int </td></tr>
<tr><td align="left" balign="left"> + getArrow() : String </td></tr>
<tr><td align="left" balign="left"> + getShowPossessivePower() : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndWithDot() : boolean </td></tr>
<tr><td align="left" balign="left"> + isDebug() : boolean </td></tr>
<tr><td align="left" balign="left"> + getCoastSeparator() : char </td></tr>
<tr><td align="left" balign="left"> + setProvinceStyle(style : int) </td></tr>
<tr><td align="left" balign="left"> + setCoastStyle(style : int) </td></tr>
<tr><td align="left" balign="left"> + setPowerStyle(style : int) </td></tr>
<tr><td align="left" balign="left"> + setUnitStyle(style : int) </td></tr>
<tr><td align="left" balign="left"> + setOrderNameStyle(style : int) </td></tr>
<tr><td align="left" balign="left"> + setProvinceFormat(fmt : int) </td></tr>
<tr><td align="left" balign="left"> + setCoastFormat(fmt : int) </td></tr>
<tr><td align="left" balign="left"> + setPowerFormat(fmt : int) </td></tr>
<tr><td align="left" balign="left"> + setUnitFormat(fmt : int) </td></tr>
<tr><td align="left" balign="left"> + setOrderNameFormat(fmt : int) </td></tr>
<tr><td align="left" balign="left"> + setArrow(value : String) </td></tr>
<tr><td align="left" balign="left"> + setShowPossessivePower(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + setEndWithDot(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + setDebug(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + setCoastSeparator(value : char) </td></tr>
<tr><td align="left" balign="left"> + encode() : byte[] </td></tr>
<tr><td align="left" balign="left"> + decode(in : byte[], defaultOptions : OrderFormatOptions) : OrderFormatOptions </td></tr>
<tr><td align="left" balign="left"> + clone() : Object </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.Convoy
	c135 [label=<<table title="dip.order.Convoy" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Convoy.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Convoy </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # convoySrc : Location </td></tr>
<tr><td align="left" balign="left"> # convoyDest : Location </td></tr>
<tr><td align="left" balign="left"> # convoyUnitType : Unit.Type </td></tr>
<tr><td align="left" balign="left"> # convoyPower : Power </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getConvoySrc() : Location </td></tr>
<tr><td align="left" balign="left"> + getConvoyUnitType() : Unit.Type </td></tr>
<tr><td align="left" balign="left"> + getConvoyedPower() : Power </td></tr>
<tr><td align="left" balign="left"> + getConvoyDest() : Location </td></tr>
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + getDefaultFormat() : String </td></tr>
<tr><td align="left" balign="left"> + toBriefString() : String </td></tr>
<tr><td align="left" balign="left"> + toFullString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> + verify(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + determineDependencies(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.DefineState
	c136 [label=<<table title="dip.order.DefineState" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DefineState.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DefineState </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + getDefaultFormat() : String </td></tr>
<tr><td align="left" balign="left"> + toBriefString() : String </td></tr>
<tr><td align="left" balign="left"> + toFullString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> + verify(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + determineDependencies(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.Support
	c137 [label=<<table title="dip.order.Support" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Support.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Support </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # supSrc : Location </td></tr>
<tr><td align="left" balign="left"> # supDest : Location </td></tr>
<tr><td align="left" balign="left"> # supUnitType : Unit.Type </td></tr>
<tr><td align="left" balign="left"> # narrowingOrder : Order </td></tr>
<tr><td align="left" balign="left"> # supPower : Power </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + setNarrowingOrder(o : Order) </td></tr>
<tr><td align="left" balign="left"> + getSupportedSrc() : Location </td></tr>
<tr><td align="left" balign="left"> + getSupportedUnitType() : Unit.Type </td></tr>
<tr><td align="left" balign="left"> + getNarrowingOrder() : Order </td></tr>
<tr><td align="left" balign="left"> + getSupportedPower() : Power </td></tr>
<tr><td align="left" balign="left"> + isSupportingHold() : boolean </td></tr>
<tr><td align="left" balign="left"> + isNonMoveSupport() : boolean </td></tr>
<tr><td align="left" balign="left"> + getSupportedDest() : Location </td></tr>
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + getDefaultFormat() : String </td></tr>
<tr><td align="left" balign="left"> + toBriefString() : String </td></tr>
<tr><td align="left" balign="left"> + toFullString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> + verify(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + determineDependencies(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.order.Retreat
	c138 [label=<<table title="dip.order.Retreat" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Retreat.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Retreat </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isByConvoy() : boolean </td></tr>
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + validate(state : TurnState, valOpts : ValidationOptions, ruleOpts : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> + verify(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + determineDependencies(adjudicator : Adjudicator) </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//dip.order.Disband extends dip.order.Order
	c122:p -> c116:p [dir=back,arrowtail=empty];
	//dip.order.ValidationOptions.DescriptiveOption extends dip.order.ValidationOptions.Option
	c118:p -> c119:p [dir=back,arrowtail=empty];
	//dip.order.Hold extends dip.order.Order
	c122:p -> c121:p [dir=back,arrowtail=empty];
	//dip.order.Order implements dip.order.Orderable
	c129:p -> c122:p [dir=back,arrowtail=empty,style=dashed];
	//dip.order.Build extends dip.order.Order
	c122:p -> c124:p [dir=back,arrowtail=empty];
	//dip.order.Move extends dip.order.Order
	c122:p -> c130:p [dir=back,arrowtail=empty];
	//dip.order.Remove extends dip.order.Order
	c122:p -> c131:p [dir=back,arrowtail=empty];
	//dip.order.Waive extends dip.order.Order
	c122:p -> c132:p [dir=back,arrowtail=empty];
	//dip.order.OrderWarning extends dip.order.OrderException
	c125:p -> c133:p [dir=back,arrowtail=empty];
	//dip.order.Convoy extends dip.order.Order
	c122:p -> c135:p [dir=back,arrowtail=empty];
	//dip.order.DefineState extends dip.order.Order
	c122:p -> c136:p [dir=back,arrowtail=empty];
	//dip.order.Support extends dip.order.Order
	c122:p -> c137:p [dir=back,arrowtail=empty];
	//dip.order.Retreat extends dip.order.Move
	c130:p -> c138:p [dir=back,arrowtail=empty];
}

