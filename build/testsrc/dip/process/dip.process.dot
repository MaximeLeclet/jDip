#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// dip.process.Adjudicator
	c356 [label=<<table title="dip.process.Adjudicator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Adjudicator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Adjudicator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getTurnState() : TurnState </td></tr>
<tr><td align="left" balign="left"> + process() </td></tr>
<tr><td align="left" balign="left"> + isUnresolvedParadox() : boolean </td></tr>
<tr><td align="left" balign="left"> + getNextTurnState() : TurnState </td></tr>
<tr><td align="left" balign="left"> + setStatReporting(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + setPowerOrderChecking(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + findOrderStateBySrc(location : Location) : OrderState </td></tr>
<tr><td align="left" balign="left"> + findOrderStateBySrc(src : Province) : OrderState </td></tr>
<tr><td align="left" balign="left"> + getOrderStates() : OrderState[] </td></tr>
<tr><td align="left" balign="left"> + isSelfSupportedMove(os : OrderState) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSubstitutedOrderStates() : List </td></tr>
<tr><td align="left" balign="left"> + addResult(result : Result) </td></tr>
<tr><td align="left" balign="left"> + addBouncedResult(os : OrderState, bouncer : OrderState) </td></tr>
<tr><td align="left" balign="left"> + addDislodgedResult(os : OrderState) </td></tr>
<tr><td align="left" balign="left"> + addResult(os : OrderState, message : String) </td></tr>
<tr><td align="left" balign="left"> + addResult(os : OrderState, type : OrderResult.ResultType, message : String) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.process.StdAdjudicator
	c357 [label=<<table title="dip.process.StdAdjudicator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./StdAdjudicator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StdAdjudicator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + process() </td></tr>
<tr><td align="left" balign="left"> + setOrderFormat(ofo : OrderFormatOptions) </td></tr>
<tr><td align="left" balign="left"> + setStatReporting(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + setPowerOrderChecking(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + getOrderStates() : OrderState[] </td></tr>
<tr><td align="left" balign="left"> + getTurnState() : TurnState </td></tr>
<tr><td align="left" balign="left"> + findOrderStateBySrc(location : Location) : OrderState </td></tr>
<tr><td align="left" balign="left"> + findOrderStateBySrc(src : Province) : OrderState </td></tr>
<tr><td align="left" balign="left"> + isSelfSupportedMove(os : OrderState) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSubstitutedOrderStates() : List </td></tr>
<tr><td align="left" balign="left"> + addResult(result : Result) </td></tr>
<tr><td align="left" balign="left"> + addBouncedResult(os : OrderState, bouncer : OrderState) </td></tr>
<tr><td align="left" balign="left"> + addDislodgedResult(os : OrderState) </td></tr>
<tr><td align="left" balign="left"> + addResult(os : OrderState, message : String) </td></tr>
<tr><td align="left" balign="left"> + addResult(os : OrderState, type : OrderResult.ResultType, message : String) </td></tr>
<tr><td align="left" balign="left"> + getNextTurnState() : TurnState </td></tr>
<tr><td align="left" balign="left"> + isUnresolvedParadox() : boolean </td></tr>
<tr><td align="left" balign="left"> # verifyOrders() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.process.OrderState
	c358 [label=<<table title="dip.process.OrderState" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./OrderState.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrderState </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + MAX_VALUE : int </td></tr>
<tr><td align="left" balign="left"> + MIN_VALUE : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getOrder() : Order </td></tr>
<tr><td align="left" balign="left"> + isCircular() : boolean </td></tr>
<tr><td align="left" balign="left"> + getEvalState() : Tristate </td></tr>
<tr><td align="left" balign="left"> + getDislodgedState() : Tristate </td></tr>
<tr><td align="left" balign="left"> + getDefMax() : int </td></tr>
<tr><td align="left" balign="left"> + getDefCertain() : int </td></tr>
<tr><td align="left" balign="left"> + getAtkMax() : int </td></tr>
<tr><td align="left" balign="left"> + getAtkCertain() : int </td></tr>
<tr><td align="left" balign="left"> + getAtkSelfSupportMax() : int </td></tr>
<tr><td align="left" balign="left"> + getAtkSelfSupportCertain() : int </td></tr>
<tr><td align="left" balign="left"> + isHeadToHead() : boolean </td></tr>
<tr><td align="left" balign="left"> + getHeadToHead() : OrderState </td></tr>
<tr><td align="left" balign="left"> + isLegal() : boolean </td></tr>
<tr><td align="left" balign="left"> + getDislodger() : OrderState </td></tr>
<tr><td align="left" balign="left"> + hasFoundConvoyPath() : boolean </td></tr>
<tr><td align="left" balign="left"> + getRetreatStrength() : int </td></tr>
<tr><td align="left" balign="left"> + isRetreatStrengthSet() : boolean </td></tr>
<tr><td align="left" balign="left"> + isVerified() : boolean </td></tr>
<tr><td align="left" balign="left"> + getDependentSupports() : OrderState[] </td></tr>
<tr><td align="left" balign="left"> + getDependentMovesToSource() : OrderState[] </td></tr>
<tr><td align="left" balign="left"> + getDependentMovesToDestination() : OrderState[] </td></tr>
<tr><td align="left" balign="left"> + getDependentSelfSupports() : OrderState[] </td></tr>
<tr><td align="left" balign="left"> # setOrder(value : Order) </td></tr>
<tr><td align="left" balign="left"> + setCircular(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + setDislodgedState(value : Tristate) </td></tr>
<tr><td align="left" balign="left"> + setDefMax(value : int) </td></tr>
<tr><td align="left" balign="left"> + setDefCertain(value : int) </td></tr>
<tr><td align="left" balign="left"> + setAtkMax(value : int) </td></tr>
<tr><td align="left" balign="left"> + setAtkCertain(value : int) </td></tr>
<tr><td align="left" balign="left"> + setAtkSelfSupportMax(value : int) </td></tr>
<tr><td align="left" balign="left"> + setAtkSelfSupportCertain(value : int) </td></tr>
<tr><td align="left" balign="left"> + setFoundConvoyPath(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + setRetreatStrength(value : int) </td></tr>
<tr><td align="left" balign="left"> + setLegal(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + setVerified(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + setEvalState(value : Tristate) </td></tr>
<tr><td align="left" balign="left"> + setHeadToHead(os : OrderState) </td></tr>
<tr><td align="left" balign="left"> + setDislodger(os : OrderState) </td></tr>
<tr><td align="left" balign="left"> + setDependentSupports(osList : List) </td></tr>
<tr><td align="left" balign="left"> + setDependentSelfSupports(osList : List) </td></tr>
<tr><td align="left" balign="left"> + setDependentMovesToSource(osList : List) </td></tr>
<tr><td align="left" balign="left"> + setDependentMovesToDestination(osList : List) </td></tr>
<tr><td align="left" balign="left"> + getSource() : Location </td></tr>
<tr><td align="left" balign="left"> + getSourceProvince() : Province </td></tr>
<tr><td align="left" balign="left"> + getPower() : Power </td></tr>
<tr><td align="left" balign="left"> + getSupport(isCertain : boolean) : int </td></tr>
<tr><td align="left" balign="left"> + getSelfSupport(isCertain : boolean) : int </td></tr>
<tr><td align="left" balign="left"> # getSupport(isCertain : boolean, supportList : OrderState[], defaultStrength : int) : int </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.process.Tristate
	c359 [label=<<table title="dip.process.Tristate" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Tristate.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Tristate </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TRUE : Tristate </td></tr>
<tr><td align="left" balign="left"> + FALSE : Tristate </td></tr>
<tr><td align="left" balign="left"> + UNCERTAIN : Tristate </td></tr>
<tr><td align="left" balign="left"> + MAYBE : Tristate </td></tr>
<tr><td align="left" balign="left"> + YES : Tristate </td></tr>
<tr><td align="left" balign="left"> + NO : Tristate </td></tr>
<tr><td align="left" balign="left"> + SUCCESS : Tristate </td></tr>
<tr><td align="left" balign="left"> + FAILURE : Tristate </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(value : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + getTristate(value : boolean) : Tristate </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.process.RetreatChecker
	c360 [label=<<table title="dip.process.RetreatChecker" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RetreatChecker.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RetreatChecker </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isValid(from : Location, to : Location) : boolean </td></tr>
<tr><td align="left" balign="left"> + getValidLocations(from : Location) : Location[] </td></tr>
<tr><td align="left" balign="left"> + hasRetreats(from : Location) : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.process.Adjustment
	c361 [label=<<table title="dip.process.Adjustment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Adjustment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Adjustment </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getAdjustmentInfo(turnState : TurnState, ruleOpts : RuleOptions, power : Power) : Adjustment.AdjustmentInfo </td></tr>
<tr><td align="left" balign="left"> + getAdjustmentInfo(turnState : TurnState, ruleOpts : RuleOptions, powers : Power[]) : Adjustment.AdjustmentInfoMap </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.process.Adjustment.AdjustmentInfo
	c362 [label=<<table title="dip.process.Adjustment.AdjustmentInfo" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Adjustment.AdjustmentInfo.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> AdjustmentInfo </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getAdjustmentAmount() : int </td></tr>
<tr><td align="left" balign="left"> + getUnitCount() : int </td></tr>
<tr><td align="left" balign="left"> + getDislodgedUnitCount() : int </td></tr>
<tr><td align="left" balign="left"> + getSupplyCenterCount() : int </td></tr>
<tr><td align="left" balign="left"> + getHomeSupplyCenterCount() : int </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.process.Adjustment.AdjustmentInfoMap
	c363 [label=<<table title="dip.process.Adjustment.AdjustmentInfoMap" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Adjustment.AdjustmentInfoMap.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> AdjustmentInfoMap </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + get(power : Power) : Adjustment.AdjustmentInfo </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//dip.process.StdAdjudicator implements dip.process.Adjudicator
	c356:p -> c357:p [dir=back,arrowtail=empty,style=dashed];
}

