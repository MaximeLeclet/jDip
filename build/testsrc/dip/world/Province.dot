#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// dip.world.Province
	c6842 [label=<<table title="dip.world.Province" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Province.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Province </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # setBorders(value : Border[]) </td></tr>
<tr><td align="left" balign="left"> # setSupplyCenter(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + getIndex() : int </td></tr>
<tr><td align="left" balign="left"> # getAdjacency() : Province.Adjacency </td></tr>
<tr><td align="left" balign="left"> + getAllAdjacent() : Location[] </td></tr>
<tr><td align="left" balign="left"> + getAdjacentLocations(coast : Coast) : Location[] </td></tr>
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getShortName() : String </td></tr>
<tr><td align="left" balign="left"> + getShortNames() : String[] </td></tr>
<tr><td align="left" balign="left"> + hasSupplyCenter() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTouching(province : Province) : boolean </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(sourceCoast : Coast, dest : Province) : boolean </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(sourceCoast : Coast, dest : Location) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLandLocked() : boolean </td></tr>
<tr><td align="left" balign="left"> + isCoastal() : boolean </td></tr>
<tr><td align="left" balign="left"> + isLand() : boolean </td></tr>
<tr><td align="left" balign="left"> + isSea() : boolean </td></tr>
<tr><td align="left" balign="left"> + isMultiCoastal() : boolean </td></tr>
<tr><td align="left" balign="left"> + getValidDirectionalCoasts() : Coast[] </td></tr>
<tr><td align="left" balign="left"> + isCoastValid(coast : Coast) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + canTransit(fromLoc : Location, unit : Unit.Type, phase : Phase, orderClass : Class) : boolean </td></tr>
<tr><td align="left" balign="left"> + canTransit(phase : Phase, order : Order) : boolean </td></tr>
<tr><td align="left" balign="left"> + getTransit(fromLoc : Location, unit : Unit.Type, phase : Phase, orderClass : Class) : Border </td></tr>
<tr><td align="left" balign="left"> + getTransit(phase : Phase, order : Order) : Border </td></tr>
<tr><td align="left" balign="left"> + getBaseMoveModifier(fromLoc : Location) : int </td></tr>
<tr><td align="left" balign="left"> + isConvoyableCoast() : boolean </td></tr>
<tr><td align="left" balign="left"> + isConvoyable() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + compareTo(obj : Object) : int </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//dip.world.Province implements java.io.Serializable
	c6891:p -> c6842:p [dir=back,arrowtail=empty,style=dashed];
	//dip.world.Province implements java.lang.Comparable
	c6892:p -> c6842:p [dir=back,arrowtail=empty,style=dashed];
	// java.io.Serializable
	c6891 [label=<<table title="java.io.Serializable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/io/Serializable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> java.io.Serializable </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.lang.Comparable
	c6892 [label=<<table title="java.lang.Comparable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Comparable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> java.lang.Comparable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + compareTo(arg0 : java.lang.Object) : int </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

