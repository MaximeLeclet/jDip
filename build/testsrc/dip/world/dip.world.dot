#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// dip.world.Unit
	c468 [label=<<table title="dip.world.Unit" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Unit.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Unit </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # type : Unit.Type </td></tr>
<tr><td align="left" balign="left"> # owner : Power </td></tr>
<tr><td align="left" balign="left"> # coast : Coast </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + setCoast(coast : Coast) </td></tr>
<tr><td align="left" balign="left"> + getCoast() : Coast </td></tr>
<tr><td align="left" balign="left"> + getPower() : Power </td></tr>
<tr><td align="left" balign="left"> + getType() : Unit.Type </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + clone() : Object </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Unit.Type
	c469 [label=<<table title="dip.world.Unit.Type" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Unit.Type.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Type </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ARMY : Unit.Type </td></tr>
<tr><td align="left" balign="left"> + FLEET : Unit.Type </td></tr>
<tr><td align="left" balign="left"> + WING : Unit.Type </td></tr>
<tr><td align="left" balign="left"> + UNDEFINED : Unit.Type </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getShortName() : String </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getFullNameWithArticle() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + parse(text : String) : Unit.Type </td></tr>
<tr><td align="left" balign="left"> # readResolve() : Object </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.VictoryConditions
	c470 [label=<<table title="dip.world.VictoryConditions" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./VictoryConditions.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VictoryConditions </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # numSCForVictory : int </td></tr>
<tr><td align="left" balign="left"> # maxYearsNoSCChange : int </td></tr>
<tr><td align="left" balign="left"> # maxGameTimeYears : int </td></tr>
<tr><td align="left" balign="left"> # initialYear : int </td></tr>
<tr><td align="left" balign="left"> # evalResults : List </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getSCsRequiredForVictory() : int </td></tr>
<tr><td align="left" balign="left"> + getYearsWithoutSCChange() : int </td></tr>
<tr><td align="left" balign="left"> + getMaxGameDurationYears() : int </td></tr>
<tr><td align="left" balign="left"> + getEvaluationResults() : List </td></tr>
<tr><td align="left" balign="left"> + evaluate(adjudicator : Adjudicator, adjMap : Adjustment.AdjustmentInfoMap) : boolean </td></tr>
<tr><td align="left" balign="left"> + evaluate(turnState : TurnState, adjMap : Adjustment.AdjustmentInfoMap) : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Province
	c471 [label=<<table title="dip.world.Province" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Province.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Province </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # setBorders(value : Border[]) </td></tr>
<tr><td align="left" balign="left"> # setSupplyCenter(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + getIndex() : int </td></tr>
<tr><td align="left" balign="left"> # getAdjacency() : Province.Adjacency </td></tr>
<tr><td align="left" balign="left"> + getAllAdjacent() : Location[] </td></tr>
<tr><td align="left" balign="left"> + getAdjacentLocations(coast : Coast) : Location[] </td></tr>
<tr><td align="left" balign="left"> + getFullName() : String </td></tr>
<tr><td align="left" balign="left"> + getShortName() : String </td></tr>
<tr><td align="left" balign="left"> + getShortNames() : String[] </td></tr>
<tr><td align="left" balign="left"> + hasSupplyCenter() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTouching(province : Province) : boolean </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(sourceCoast : Coast, dest : Province) : boolean </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(sourceCoast : Coast, dest : Location) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLandLocked() : boolean </td></tr>
<tr><td align="left" balign="left"> + isCoastal() : boolean </td></tr>
<tr><td align="left" balign="left"> + isLand() : boolean </td></tr>
<tr><td align="left" balign="left"> + isSea() : boolean </td></tr>
<tr><td align="left" balign="left"> + isMultiCoastal() : boolean </td></tr>
<tr><td align="left" balign="left"> + getValidDirectionalCoasts() : Coast[] </td></tr>
<tr><td align="left" balign="left"> + isCoastValid(coast : Coast) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + canTransit(fromLoc : Location, unit : Unit.Type, phase : Phase, orderClass : Class) : boolean </td></tr>
<tr><td align="left" balign="left"> + canTransit(phase : Phase, order : Order) : boolean </td></tr>
<tr><td align="left" balign="left"> + getTransit(fromLoc : Location, unit : Unit.Type, phase : Phase, orderClass : Class) : Border </td></tr>
<tr><td align="left" balign="left"> + getTransit(phase : Phase, order : Order) : Border </td></tr>
<tr><td align="left" balign="left"> + getBaseMoveModifier(fromLoc : Location) : int </td></tr>
<tr><td align="left" balign="left"> + isConvoyableCoast() : boolean </td></tr>
<tr><td align="left" balign="left"> + isConvoyable() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + compareTo(obj : Object) : int </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Province.Adjacency
	c472 [label=<<table title="dip.world.Province.Adjacency" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Province.Adjacency.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Adjacency </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # setLocations(coast : Coast, locations : Location[]) </td></tr>
<tr><td align="left" balign="left"> # getLocations(coast : Coast) : Location[] </td></tr>
<tr><td align="left" balign="left"> # createWingCoasts() </td></tr>
<tr><td align="left" balign="left"> # validate(p : Province) : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Location
	c473 [label=<<table title="dip.world.Location" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Location.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Location </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EMPTY : Location[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getProvince() : Province </td></tr>
<tr><td align="left" balign="left"> + getCoast() : Coast </td></tr>
<tr><td align="left" balign="left"> + isConvoyableCoast() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTouching(destProvince : Province) : boolean </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(destProvince : Province) : boolean </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(location : Location) : boolean </td></tr>
<tr><td align="left" balign="left"> + isProvinceEqual(location : Location) : boolean </td></tr>
<tr><td align="left" balign="left"> + isProvinceEqual(province : Province) : boolean </td></tr>
<tr><td align="left" balign="left"> + clone() : Object </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equalsLoosely(loc : Location) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + toLongString() : String </td></tr>
<tr><td align="left" balign="left"> + appendBrief(sb : StringBuffer) </td></tr>
<tr><td align="left" balign="left"> + appendFull(sb : StringBuffer) </td></tr>
<tr><td align="left" balign="left"> + getValidatedWithMove(unitType : Unit.Type, from : Location) : Location </td></tr>
<tr><td align="left" balign="left"> + getValidatedAndDerived(unitType : Unit.Type, existingUnit : Unit) : Location </td></tr>
<tr><td align="left" balign="left"> + getValidatedSetup(unitType : Unit.Type) : Location </td></tr>
<tr><td align="left" balign="left"> + getValidated(unitType : Unit.Type) : Location </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Path
	c474 [label=<<table title="dip.world.Path" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Path.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Path </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getConvoyRouteEvaluation(move : Move, invalidLoc : Location, actualPath : List) : Tristate </td></tr>
<tr><td align="left" balign="left"> + isRouteValid(pos : Position, src : Location, dest : Location, route : Province[]) : boolean </td></tr>
<tr><td align="left" balign="left"> + isRouteLegal(adj : Adjudicator, route : Province[]) : boolean </td></tr>
<tr><td align="left" balign="left"> + evaluateRoutes(adj : Adjudicator, routes : List, invalid : Location) : Tristate </td></tr>
<tr><td align="left" balign="left"> + isPossibleConvoyRoute(src : Location, dest : Location) : boolean </td></tr>
<tr><td align="left" balign="left"> + getConvoyRoute(src : Location, dest : Location) : List </td></tr>
<tr><td align="left" balign="left"> + isLegalConvoyRoute(src : Location, dest : Location) : boolean </td></tr>
<tr><td align="left" balign="left"> + getLegalConvoyRoute(src : Location, dest : Location) : List </td></tr>
<tr><td align="left" balign="left"> + getConvoyRouteEvaluation(src : Location, dest : Location, validPath : List) : Tristate </td></tr>
<tr><td align="left" balign="left"> + getConvoyRouteEvaluation(src : Location, dest : Location, invalid : Location, validPath : List) : Tristate </td></tr>
<tr><td align="left" balign="left"> # findPathBreadthFirst(src : Location, dest : Location, current : Location, path : List, pathEvaluator : Path.PathEvaluator) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMinDistance(src : Province, dest : Province) : int </td></tr>
<tr><td align="left" balign="left"> + findAllSeaPaths(evaluator : Path.FAPEvaluator, src : Province, dest : Province) : Province[][] </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Path.PathEvaluator
	c475 [label=<<table title="dip.world.Path.PathEvaluator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Path.PathEvaluator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> PathEvaluator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + evaluate(location : Location) : boolean </td></tr>
<tr><td align="left" balign="left"> + isAdjacentToDest(current : Location, dest : Location) : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Path.AnyConvoyPathEvaluator
	c476 [label=<<table title="dip.world.Path.AnyConvoyPathEvaluator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Path.AnyConvoyPathEvaluator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> AnyConvoyPathEvaluator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + evaluate(location : Location) : boolean </td></tr>
<tr><td align="left" balign="left"> + isAdjacentToDest(current : Location, dest : Location) : boolean </td></tr>
<tr><td align="left" balign="left"> # evalFleet(province : Province, unit : Unit) : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Path.FAPEvaluator
	c477 [label=<<table title="dip.world.Path.FAPEvaluator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Path.FAPEvaluator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> FAPEvaluator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + evaluate(province : Province) : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Path.FleetFAPEvaluator
	c478 [label=<<table title="dip.world.Path.FleetFAPEvaluator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Path.FleetFAPEvaluator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> FleetFAPEvaluator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + evaluate(province : Province) : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Path.ConvoyFAPEvaluator
	c479 [label=<<table title="dip.world.Path.ConvoyFAPEvaluator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Path.ConvoyFAPEvaluator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConvoyFAPEvaluator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + evaluate(province : Province) : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.TurnState
	c480 [label=<<table title="dip.world.TurnState" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TurnState.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TurnState </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + setWorld(world : World) </td></tr>
<tr><td align="left" balign="left"> + getWorld() : World </td></tr>
<tr><td align="left" balign="left"> + getPhase() : Phase </td></tr>
<tr><td align="left" balign="left"> + setPhase(phase : Phase) </td></tr>
<tr><td align="left" balign="left"> + getPosition() : Position </td></tr>
<tr><td align="left" balign="left"> + setPosition(position : Position) </td></tr>
<tr><td align="left" balign="left"> + getResultList() : List </td></tr>
<tr><td align="left" balign="left"> + setResultList(list : List) </td></tr>
<tr><td align="left" balign="left"> + getSCOwnerChanged() : boolean </td></tr>
<tr><td align="left" balign="left"> + setSCOwnerChanged(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + getAllOrders() : List </td></tr>
<tr><td align="left" balign="left"> + clearAllOrders() </td></tr>
<tr><td align="left" balign="left"> + getOrders(power : Power) : List </td></tr>
<tr><td align="left" balign="left"> + setOrders(power : Power, list : List) </td></tr>
<tr><td align="left" balign="left"> + setEnded(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + isEnded() : boolean </td></tr>
<tr><td align="left" balign="left"> + setResolved(value : boolean) </td></tr>
<tr><td align="left" balign="left"> + isResolved() : boolean </td></tr>
<tr><td align="left" balign="left"> + isOrderSuccessful(o : Orderable) : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.WorldFactory
	c481 [label=<<table title="dip.world.WorldFactory" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./WorldFactory.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> WorldFactory </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getInstance() : WorldFactory </td></tr>
<tr><td align="left" balign="left"> + createWorld(variant : Variant) : World </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Border
	c482 [label=<<table title="dip.world.Border" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Border.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Border </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + canTransit(phase : Phase, order : Order) : boolean </td></tr>
<tr><td align="left" balign="left"> + canTransit(fromLoc : Location, unit : Unit.Type, phase : Phase, orderClass : Class) : boolean </td></tr>
<tr><td align="left" balign="left"> + getBaseMoveModifier(moveFrom : Location) : int </td></tr>
<tr><td align="left" balign="left"> + getDescription() : String </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.InvalidWorldException
	c483 [label=<<table title="dip.world.InvalidWorldException" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./InvalidWorldException.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> InvalidWorldException </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.GameSetup
	c484 [label=<<table title="dip.world.GameSetup" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GameSetup.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> GameSetup </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Coast
	c485 [label=<<table title="dip.world.Coast" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Coast.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Coast </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UNDEFINED : Coast </td></tr>
<tr><td align="left" balign="left"> + WING : Coast </td></tr>
<tr><td align="left" balign="left"> + NONE : Coast </td></tr>
<tr><td align="left" balign="left"> + SINGLE : Coast </td></tr>
<tr><td align="left" balign="left"> + NORTH : Coast </td></tr>
<tr><td align="left" balign="left"> + SOUTH : Coast </td></tr>
<tr><td align="left" balign="left"> + WEST : Coast </td></tr>
<tr><td align="left" balign="left"> + EAST : Coast </td></tr>
<tr><td align="left" balign="left"> + TOUCHING : Coast </td></tr>
<tr><td align="left" balign="left"> + LAND : Coast </td></tr>
<tr><td align="left" balign="left"> + SEA : Coast </td></tr>
<tr><td align="left" balign="left"> + NOT_DISPLAYED : Coast[] </td></tr>
<tr><td align="left" balign="left"> + ALL_COASTS : Coast[] </td></tr>
<tr><td align="left" balign="left"> + ANY_SEA : Coast[] </td></tr>
<tr><td align="left" balign="left"> + ANY_DIRECTIONAL : Coast[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + getAbbreviation() : String </td></tr>
<tr><td align="left" balign="left"> + getIndex() : int </td></tr>
<tr><td align="left" balign="left"> + getCoast(idx : int) : Coast </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + isDisplayable(coast : Coast) : boolean </td></tr>
<tr><td align="left" balign="left"> + parse(text : String) : Coast </td></tr>
<tr><td align="left" balign="left"> + getProvinceName(input : String) : String </td></tr>
<tr><td align="left" balign="left"> + normalize(input : String) : String </td></tr>
<tr><td align="left" balign="left"> + isDirectional() : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> # readResolve() : Object </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Phase
	c486 [label=<<table title="dip.world.Phase" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Phase.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Phase </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # seasonType : Phase.SeasonType </td></tr>
<tr><td align="left" balign="left"> # yearType : Phase.YearType </td></tr>
<tr><td align="left" balign="left"> # phaseType : Phase.PhaseType </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getYear() : int </td></tr>
<tr><td align="left" balign="left"> + getYearType() : Phase.YearType </td></tr>
<tr><td align="left" balign="left"> + getPhaseType() : Phase.PhaseType </td></tr>
<tr><td align="left" balign="left"> + getSeasonType() : Phase.SeasonType </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + compareTo(obj : Object) : int </td></tr>
<tr><td align="left" balign="left"> + getNext() : Phase </td></tr>
<tr><td align="left" balign="left"> + getPrevious() : Phase </td></tr>
<tr><td align="left" balign="left"> + isValid(st : Phase.SeasonType, pt : Phase.PhaseType) : boolean </td></tr>
<tr><td align="left" balign="left"> + parse(in : String) : Phase </td></tr>
<tr><td align="left" balign="left"> + getAllSeasonPhaseCombos() : String[] </td></tr>
<tr><td align="left" balign="left"> # readResolve() : Object </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Phase.SeasonType
	c487 [label=<<table title="dip.world.Phase.SeasonType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Phase.SeasonType.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SeasonType </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # CONST_SPRING : String </td></tr>
<tr><td align="left" balign="left"> # CONST_FALL : String </td></tr>
<tr><td align="left" balign="left"> # CONST_SUMMER : String </td></tr>
<tr><td align="left" balign="left"> # CONST_WINTER : String </td></tr>
<tr><td align="left" balign="left"> # IL8N_SPRING : String </td></tr>
<tr><td align="left" balign="left"> # IL8N_FALL : String </td></tr>
<tr><td align="left" balign="left"> # POS_SPRING : int </td></tr>
<tr><td align="left" balign="left"> # POS_FALL : int </td></tr>
<tr><td align="left" balign="left"> + SPRING : Phase.SeasonType </td></tr>
<tr><td align="left" balign="left"> + FALL : Phase.SeasonType </td></tr>
<tr><td align="left" balign="left"> + ALL : Phase.SeasonType[] </td></tr>
<tr><td align="left" balign="left"> # position : int </td></tr>
<tr><td align="left" balign="left"> # displayName : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + compareTo(obj : Object) : int </td></tr>
<tr><td align="left" balign="left"> + getNext() : Phase.SeasonType </td></tr>
<tr><td align="left" balign="left"> + getPrevious() : Phase.SeasonType </td></tr>
<tr><td align="left" balign="left"> + parse(in : String) : Phase.SeasonType </td></tr>
<tr><td align="left" balign="left"> # readResolve() : Object </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Phase.PhaseType
	c488 [label=<<table title="dip.world.Phase.PhaseType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Phase.PhaseType.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PhaseType </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # CONST_ADJUSTMENT : String </td></tr>
<tr><td align="left" balign="left"> # CONST_MOVEMENT : String </td></tr>
<tr><td align="left" balign="left"> # CONST_RETREAT : String </td></tr>
<tr><td align="left" balign="left"> # IL8N_ADJUSTMENT : String </td></tr>
<tr><td align="left" balign="left"> # IL8N_MOVEMENT : String </td></tr>
<tr><td align="left" balign="left"> # IL8N_RETREAT : String </td></tr>
<tr><td align="left" balign="left"> # POS_MOVEMENT : int </td></tr>
<tr><td align="left" balign="left"> # POS_RETREAT : int </td></tr>
<tr><td align="left" balign="left"> # POS_ADJUSTMENT : int </td></tr>
<tr><td align="left" balign="left"> + ADJUSTMENT : Phase.PhaseType </td></tr>
<tr><td align="left" balign="left"> + MOVEMENT : Phase.PhaseType </td></tr>
<tr><td align="left" balign="left"> + RETREAT : Phase.PhaseType </td></tr>
<tr><td align="left" balign="left"> + ALL : Phase.PhaseType[] </td></tr>
<tr><td align="left" balign="left"> # displayName : String </td></tr>
<tr><td align="left" balign="left"> # constName : String </td></tr>
<tr><td align="left" balign="left"> # position : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getBriefName() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + compareTo(obj : Object) : int </td></tr>
<tr><td align="left" balign="left"> + getNext() : Phase.PhaseType </td></tr>
<tr><td align="left" balign="left"> + getPrevious() : Phase.PhaseType </td></tr>
<tr><td align="left" balign="left"> + parse(in : String) : Phase.PhaseType </td></tr>
<tr><td align="left" balign="left"> # readResolve() : Object </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Phase.YearType
	c489 [label=<<table title="dip.world.Phase.YearType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Phase.YearType.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> YearType </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # year : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getYear() : int </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + compareTo(obj : Object) : int </td></tr>
<tr><td align="left" balign="left"> + getNext() : Phase.YearType </td></tr>
<tr><td align="left" balign="left"> + getPrevious() : Phase.YearType </td></tr>
<tr><td align="left" balign="left"> + parse(input : String) : Phase.YearType </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Position
	c490 [label=<<table title="dip.world.Position" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Position.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Position </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # powerMap : Map </td></tr>
<tr><td align="left" balign="left"> # provArray : Position.ProvinceData[] </td></tr>
<tr><td align="left" balign="left"> # map : Map </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + size() : int </td></tr>
<tr><td align="left" balign="left"> + getProvinces() : Province[] </td></tr>
<tr><td align="left" balign="left"> + isEliminated(power : Power) : boolean </td></tr>
<tr><td align="left" balign="left"> + setEliminated(power : Power, value : boolean) </td></tr>
<tr><td align="left" balign="left"> + setEliminationStatus(powers : Power[]) </td></tr>
<tr><td align="left" balign="left"> + setSupplyCenterOwner(province : Province, power : Power) </td></tr>
<tr><td align="left" balign="left"> + setSupplyCenterHomePower(province : Province, power : Power) </td></tr>
<tr><td align="left" balign="left"> + hasSupplyCenterOwner(province : Province) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSupplyCenterAHome(province : Province) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSupplyCenterHomePower(province : Province) : Power </td></tr>
<tr><td align="left" balign="left"> + getSupplyCenterOwner(province : Province) : Power </td></tr>
<tr><td align="left" balign="left"> + setUnit(province : Province, unit : Unit) </td></tr>
<tr><td align="left" balign="left"> + hasUnit(province : Province) : boolean </td></tr>
<tr><td align="left" balign="left"> + getUnit(province : Province) : Unit </td></tr>
<tr><td align="left" balign="left"> + hasUnit(province : Province, unitType : Unit.Type) : boolean </td></tr>
<tr><td align="left" balign="left"> + hasDislodgedUnit(province : Province, unitType : Unit.Type) : boolean </td></tr>
<tr><td align="left" balign="left"> + setDislodgedUnit(province : Province, unit : Unit) </td></tr>
<tr><td align="left" balign="left"> + getDislodgedUnit(province : Province) : Unit </td></tr>
<tr><td align="left" balign="left"> + setLastOccupier(province : Province, power : Power) </td></tr>
<tr><td align="left" balign="left"> + getLastOccupier(province : Province) : Power </td></tr>
<tr><td align="left" balign="left"> + hasDislodgedUnit(province : Province) : boolean </td></tr>
<tr><td align="left" balign="left"> + getUnitProvinces() : Province[] </td></tr>
<tr><td align="left" balign="left"> + getDislodgedUnitProvinces() : Province[] </td></tr>
<tr><td align="left" balign="left"> + getUnitCount() : int </td></tr>
<tr><td align="left" balign="left"> + getDislodgedUnitCount() : int </td></tr>
<tr><td align="left" balign="left"> + getHomeSupplyCenters() : Province[] </td></tr>
<tr><td align="left" balign="left"> + getHomeSupplyCenters(power : Power) : Province[] </td></tr>
<tr><td align="left" balign="left"> + hasAnOwnedHomeSC(power : Power) : boolean </td></tr>
<tr><td align="left" balign="left"> + getOwnedSupplyCenters(power : Power) : Province[] </td></tr>
<tr><td align="left" balign="left"> + getOwnedSupplyCenters() : Province[] </td></tr>
<tr><td align="left" balign="left"> + clone() : Object </td></tr>
<tr><td align="left" balign="left"> + cloneExceptUnits() : Position </td></tr>
<tr><td align="left" balign="left"> + cloneExceptDislodged() : Position </td></tr>
<tr><td align="left" balign="left"> + getUnitProvinces(power : Power) : Province[] </td></tr>
<tr><td align="left" balign="left"> + getDislodgedUnitProvinces(power : Power) : Province[] </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.World
	c491 [label=<<table title="dip.world.World" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./World.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> World </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + open(file : File) : World </td></tr>
<tr><td align="left" balign="left"> + save(file : File, world : World) </td></tr>
<tr><td align="left" balign="left"> + getMap() : Map </td></tr>
<tr><td align="left" balign="left"> + setPowerState(power : Power, state : Object) </td></tr>
<tr><td align="left" balign="left"> + getPowerState(power : Power) : Object </td></tr>
<tr><td align="left" balign="left"> + setGlobalState(state : Object) </td></tr>
<tr><td align="left" balign="left"> + getGlobalState() : Object </td></tr>
<tr><td align="left" balign="left"> + setVictoryConditions(value : VictoryConditions) </td></tr>
<tr><td align="left" balign="left"> + getVictoryConditions() : VictoryConditions </td></tr>
<tr><td align="left" balign="left"> + getInitialTurnState() : TurnState </td></tr>
<tr><td align="left" balign="left"> + getLastTurnState() : TurnState </td></tr>
<tr><td align="left" balign="left"> + getTurnState(phase : Phase) : TurnState </td></tr>
<tr><td align="left" balign="left"> + getNextTurnState(state : TurnState) : TurnState </td></tr>
<tr><td align="left" balign="left"> + getAllTurnStates() : List </td></tr>
<tr><td align="left" balign="left"> + getPreviousTurnState(state : TurnState) : TurnState </td></tr>
<tr><td align="left" balign="left"> + setTurnState(turnState : TurnState) </td></tr>
<tr><td align="left" balign="left"> + removeTurnState(turnState : TurnState) </td></tr>
<tr><td align="left" balign="left"> + removeAllTurnStates() </td></tr>
<tr><td align="left" balign="left"> + getPhaseSet() : Set </td></tr>
<tr><td align="left" balign="left"> + setGameMetadata(gmd : GameMetadata) </td></tr>
<tr><td align="left" balign="left"> + getGameMetadata() : GameMetadata </td></tr>
<tr><td align="left" balign="left"> + setPlayerMetadata(power : Power, pmd : PlayerMetadata) </td></tr>
<tr><td align="left" balign="left"> + getPlayerMetadata(power : Power) : PlayerMetadata </td></tr>
<tr><td align="left" balign="left"> + setUndoRedoManager(urm : UndoRedoManager) </td></tr>
<tr><td align="left" balign="left"> + getUndoRedoManager() : UndoRedoManager </td></tr>
<tr><td align="left" balign="left"> + setGameSetup(gs : GameSetup) </td></tr>
<tr><td align="left" balign="left"> + getGameSetup() : GameSetup </td></tr>
<tr><td align="left" balign="left"> + getPressStore() : PressStore </td></tr>
<tr><td align="left" balign="left"> + getVariantInfo() : World.VariantInfo </td></tr>
<tr><td align="left" balign="left"> + setVariantInfo(vi : World.VariantInfo) </td></tr>
<tr><td align="left" balign="left"> + getRuleOptions() : RuleOptions </td></tr>
<tr><td align="left" balign="left"> + setRuleOptions(ruleOpts : RuleOptions) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.World.VariantInfo
	c492 [label=<<table title="dip.world.World.VariantInfo" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./World.VariantInfo.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VariantInfo </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + setVariantName(value : String) </td></tr>
<tr><td align="left" balign="left"> + setMapName(value : String) </td></tr>
<tr><td align="left" balign="left"> + setSymbolPackName(value : String) </td></tr>
<tr><td align="left" balign="left"> + setVariantVersion(value : float) </td></tr>
<tr><td align="left" balign="left"> + setSymbolPackVersion(value : float) </td></tr>
<tr><td align="left" balign="left"> + setRuleOptions(value : RuleOptions) </td></tr>
<tr><td align="left" balign="left"> + getVariantName() : String </td></tr>
<tr><td align="left" balign="left"> + getMapName() : String </td></tr>
<tr><td align="left" balign="left"> + getSymbolPackName() : String </td></tr>
<tr><td align="left" balign="left"> + getVariantVersion() : float </td></tr>
<tr><td align="left" balign="left"> + getSymbolPackVersion() : float </td></tr>
<tr><td align="left" balign="left"> + getRuleOptions() : RuleOptions </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.RuleOptions
	c493 [label=<<table title="dip.world.RuleOptions" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RuleOptions.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RuleOptions </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VALUE_TRUE : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + VALUE_FALSE : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + VALUE_BUILDS_HOME_ONLY : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + VALUE_BUILDS_ANY_OWNED : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + VALUE_BUILDS_ANY_IF_HOME_OWNED : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + OPTION_BUILDS : RuleOptions.Option </td></tr>
<tr><td align="left" balign="left"> + VALUE_WINGS_ENABLED : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + VALUE_WINGS_DISABLED : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + OPTION_WINGS : RuleOptions.Option </td></tr>
<tr><td align="left" balign="left"> + VALUE_PATHS_EXPLICIT : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + VALUE_PATHS_IMPLICIT : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + VALUE_PATHS_EITHER : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + OPTION_CONVOYED_MOVES : RuleOptions.Option </td></tr>
<tr><td align="left" balign="left"> # optionMap : HashMap </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + setOption(option : RuleOptions.Option, value : RuleOptions.OptionValue) </td></tr>
<tr><td align="left" balign="left"> + getOptionValue(option : RuleOptions.Option) : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + getAllOptions() : Set </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + createFromVariant(variant : Variant) : RuleOptions </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.RuleOptions.Option
	c494 [label=<<table title="dip.world.RuleOptions.Option" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RuleOptions.Option.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Option </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # name : String </td></tr>
<tr><td align="left" balign="left"> # allowed : RuleOptions.OptionValue[] </td></tr>
<tr><td align="left" balign="left"> # defaultValue : RuleOptions.OptionValue </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + getDefault() : RuleOptions.OptionValue </td></tr>
<tr><td align="left" balign="left"> + getAllowed() : RuleOptions.OptionValue[] </td></tr>
<tr><td align="left" balign="left"> + isAllowed(optionValue : RuleOptions.OptionValue) : boolean </td></tr>
<tr><td align="left" balign="left"> + getNameI18N() : String </td></tr>
<tr><td align="left" balign="left"> + getDescriptionI18N() : String </td></tr>
<tr><td align="left" balign="left"> + checkValue(value : RuleOptions.OptionValue) : boolean </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> # readResolve() : Object </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.RuleOptions.OptionValue
	c495 [label=<<table title="dip.world.RuleOptions.OptionValue" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RuleOptions.OptionValue.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OptionValue </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + getNameI18N() : String </td></tr>
<tr><td align="left" balign="left"> + getDescriptionI18N() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> # readResolve() : Object </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Map
	c496 [label=<<table title="dip.world.Map" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Map.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Map </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getPowers() : Power[] </td></tr>
<tr><td align="left" balign="left"> + getPower(name : String) : Power </td></tr>
<tr><td align="left" balign="left"> + getClosestPower(powerName : String) : Power </td></tr>
<tr><td align="left" balign="left"> + getPowerMatching(powerName : String) : Power </td></tr>
<tr><td align="left" balign="left"> + getProvinces() : Province[] </td></tr>
<tr><td align="left" balign="left"> + getProvince(name : String) : Province </td></tr>
<tr><td align="left" balign="left"> + getProvinceMatching(input : String) : Province </td></tr>
<tr><td align="left" balign="left"> + getProvincesMatchingClosest(input : String) : Collection </td></tr>
<tr><td align="left" balign="left"> + parseLocation(input : String) : Location </td></tr>
<tr><td align="left" balign="left"> + replaceProvinceNames(sb : StringBuffer) </td></tr>
<tr><td align="left" balign="left"> + filterPowerNames(sb : StringBuffer) </td></tr>
<tr><td align="left" balign="left"> + getFirstPowerToken(sb : StringBuffer) : String </td></tr>
<tr><td align="left" balign="left"> + getFirstPower(input : String) : Power </td></tr>
<tr><td align="left" balign="left"> + reverseIndex(i : int) : Province </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// dip.world.Power
	c497 [label=<<table title="dip.world.Power" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Power.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Power </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + getAdjective() : String </td></tr>
<tr><td align="left" balign="left"> + getNames() : String[] </td></tr>
<tr><td align="left" balign="left"> + isActive() : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + compareTo(obj : Object) : int </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//dip.world.Path.AnyConvoyPathEvaluator implements dip.world.Path.PathEvaluator
	c475:p -> c476:p [dir=back,arrowtail=empty,style=dashed];
	//dip.world.Path.FleetFAPEvaluator extends dip.world.Path.FAPEvaluator
	c477:p -> c478:p [dir=back,arrowtail=empty];
	//dip.world.Path.ConvoyFAPEvaluator extends dip.world.Path.FAPEvaluator
	c477:p -> c479:p [dir=back,arrowtail=empty];
}

